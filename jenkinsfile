pipeline{
    agent any
    environment{
        SONAR_HOME= tool "Sonar"
        IMAGE_NAME="advcicd"
        IMAGE_TAG="latest"
        SLACK_WEBHOOK="https://hooks.slack.com/services/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"
    }
    stages{
        stage("Checkout"){
            steps{
                git url: "https://github.com/DeVeNdRa1910/advCICD.git", branch: "main"
            }
        }
        stage("Sonarqube Quality Analysis"){
            steps{
                withSonarQubeEnv("Sonar"){
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=advcicd -Dsonar.projectKey=advcicd "
                }
            }
        }
        stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml' 
            }
        }
        stage("Sonar quality gates"){
            steps{
                timeout(time: 4, unit: "MINUTES"){
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage("Trivy File System Scan"){
            steps{
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        stage("Docker Login") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHubCred', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                    echo "Logging in to Docker Hub"
                    sh 'echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER" --password-stdin'
                }
            }
        }
        stage("Build docker image"){
            steps{
                echo "This is building the code"
                withCredentials([usernamePassword(credentialsId: 'dockerHubCred', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]){
                    sh "docker build -t ${DOCKER_HUB_USER}/frontend-advcicd:${IMAGE_TAG} ./frontend"
                    sh "docker build -t ${DOCKER_HUB_USER}/backend-advcicd:${IMAGE_TAG} ./backend"
                }
            }
        }
        stage("scan docker image"){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerHubCred', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]){
                    sh "trivy image --format table -o trivy-image-report.html ${DOCKER_HUB_USER}/frontend-advcicd:${IMAGE_TAG}" 
                    sh "trivy image --format table -o trivy-image-report.html ${DOCKER_HUB_USER}/backend-advcicd:${IMAGE_TAG}" 
                }
            }
        }
        stage("Push image on Docker Hub"){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerHubCred', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]){
                    echo "This stage is pushing Docker image on DockerHub" 
                    sh '''
                        docker image push ${DOCKER_HUB_USER}/frontend-advcicd:${IMAGE_TAG} 
                        docker image push ${DOCKER_HUB_USER}/backend-advcicd:${IMAGE_TAG}
                    '''
                }
            }
        }
        stage("Tag previous Docker image") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHubCred', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]){
                    sh '''
                        docker pull ${DOCKER_HUB_USER}/frontend-advcicd:latest || true
                        docker tag ${DOCKER_HUB_USER}/frontend-advcicd:latest ${DOCKER_HUB_USER}/frontend-advcicd:previous
                        docker push ${DOCKER_HUB_USER}/frontend-advcicd:previous || true
        
                        docker pull ${DOCKER_HUB_USER}/backend-advcicd:latest || true
                        docker tag ${DOCKER_HUB_USER}/backend-advcicd:latest ${DOCKER_HUB_USER}/backend-advcicd:previous
                        docker push ${DOCKER_HUB_USER}/backend-advcicd:previous || true
                    '''
                }
            }
        }
        stage("Check Minikube Status") {
            steps {
                sh '''
                    echo "Minikube status:"
                    minikube status || echo "Minikube not running!"
                    echo "Minikube IP:"
                    minikube ip || echo "Failed to get IP"
                '''
            }
        }
        
        stage("Creating Kubernetes object"){
            steps{
                withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh '''  
                        export KUBECONFIG=$KUBECONFIG_FILE
                        cp $KUBECONFIG_FILE /tmp/kubeconfig-copy.yaml
                        chmod 600 /tmp/kubeconfig-copy.yaml
                        export KUBECONFIG=/tmp/kubeconfig-copy.yaml

        
                        kubectl config set-cluster minikube --server=https://192.168.39.29:8443 --insecure-skip-tls-verify=true
                        
                        kubectl apply -f namespace.yml --validate=false
                        kubectl apply -f deployment.yml --validate=false
                        kubectl apply -f service.yml --validate=false
                    '''
                }
            }
        }
        stage("varify the kubernetes objects"){
            steps{
                withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh '''  
                        export KUBECONFIG=$KUBECONFIG_FILE
                        cp $KUBECONFIG_FILE /tmp/kubeconfig-copy.yaml
                        chmod 600 /tmp/kubeconfig-copy.yaml
                        export KUBECONFIG=/tmp/kubeconfig-copy.yaml
        
        
                        kubectl config set-cluster minikube --server=https://192.168.39.29:8443 --insecure-skip-tls-verify=true
                        
                        kubectl get pods -n advcicd
                        kubectl get svc -n advcicd
                        
                    '''
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up workspace"
            cleanWs()
        }
        success {
            sh '''
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"✅ Build *SUCCESS* | Pipeline executes successfully"}' \
                https://hooks.slack.com/services/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

            '''
        }
        failure {
            withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG_FILE')]) {

                sh ''' 
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text":"❌ Build *FAILED* | Pipeline has been broken"}' \
                    https://hooks.slack.com/services/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
                '''
                    
                sh '''  
                    export KUBECONFIG=$KUBECONFIG_FILE
                    cp $KUBECONFIG_FILE /tmp/kubeconfig-copy.yaml
                    chmod 600 /tmp/kubeconfig-copy.yaml
                    export KUBECONFIG=/tmp/kubeconfig-copy.yaml
        
        
                    kubectl set image deployment/frontend-deployment frontend-container=${DOCKER_HUB_USER}/frontend-advcicd:previous -n advcicd || true
                    kubectl set image deployment/backend-deployment backend-container=${DOCKER_HUB_USER}/backend-advcicd:previous -n advcicd || true
                    
                    kubectl rollout restart deployment frontend-deployment -n advcicd
                    kubectl rollout restart deployment backend-deployment -n advcicd


                    kubectl rollout status deployment frontend-deployment -n advcicd || true
                    kubectl rollout status deployment backend-deployment -n advcicd || true
                '''
            }
        }
    }
}
